#!/usr/bin/env ruby

require 'json'
require 'optparse'
require 'pqueue'

Signal.trap("PIPE", "EXIT")

def usage
  puts <<EOM
SYNOPSIS: line <station-from> <station-to>
EOM
  exit
end

def path_print(h)
  a = h[0][0]
  h.drop(1).each do |item|
    a += " -> #{item[0]} [#{item[1]}]"
  end
  puts a
  STDOUT.flush
end

l2s = {} # l2s[line] = [station]
s2l = {} # s2l[station] = [line]
distance = {} # distance[station1][station2]; station1 and station2 must belong to a line
station_id = {}  # station_id[station] = id

def station_name_trim(str)
  str.gsub(/駅$/, '')
end

#
# optparse
#
opts = {l: 4, w: 2, margin: 3, jr: false, debug: false}
OptionParser.new do |opt|
  opt.on('-l INT', "Upper the route length (num of stations) (default: #{opts[:l]})") { |v|
    opts[:l] = v.to_i
    STDERR.puts '[WARN] -l specified too large (>5)' if opts[:l] > 5
  }
  opt.on('-w INT', "Weight of train-change (default: #{opts[:l]})") { |v|
    opts[:w] = v.to_i
  }
  opt.on('-m INT', '--margin INT', "このくらいなら遅くても許す (default: #{opts[:margin]})") { |v|
    opts[:margin] = v.to_i
    STDERR.puts '[WARN] --margin specified too large (>5)' if opts[:margin] > 5
    STDERR.puts '[ERROR] --margin must be zero or positive' if opts[:margin] < 0
  }
  opt.on('-F', '--jr', "Allow fucking JR lines") {
    opts[:jr] = true
  }
  opt.on('--debug', "for debugging") {
    opts[:debug] = true
  }
  opt.parse! ARGV
end

if ARGV.size < 2
  usage
end

s_from = station_name_trim ARGV[0]
s_to = station_name_trim ARGV[1]

#
# load database
#
data = JSON.load File.open("#{File.dirname(__FILE__)}/../lines.json").read
sid = 0  # station id
data.each do |line|

  next if !opts[:jr] && line['type'] == 'JR'

  lname = line['name']
  l2s[lname] = []

  indices = {}
  id = 0  # id in this line

  line['stations'].each do |full|
    aliases = full.split(':').map{|name| station_name_trim name}
    aliases.each do |sname|
      l2s[lname] << sname
      if s2l[sname]
        s2l[sname] << lname
      else
        s2l[sname] = [lname]
      end
      indices[sname] = id
    end
    id += 1

    option = aliases.map{|sname| station_id[sname]}.select{|i| i != nil}
    if option.size > 0
      aliases.each do |sname|
        station_id[sname] = option[0]
      end
    else
      aliases.each do |sname|
        station_id[sname] = sid
      end
      sid += 1
    end
  end

  # distance pre-calc
  inf = 1000000
  indices.keys.each do |u|
    distance[u] = {} if distance[u] == nil
    indices.keys.each do |v|
      distance[u][v] = inf
    end
  end
  indices.keys.each do |u|
    indices.keys.each do |v|
      distance[u][v] = [distance[u][v], (indices[v] - indices[u]).abs].min
    end
  end
end

#
# input validation
#
if s2l[s_from] == nil
  STDERR.puts "[ERROR] The station #{s_from} is unknown"
  exit
end
if s2l[s_to] == nil
  STDERR.puts "[ERROR] The station #{s_to} is unknown"
  exit
end

#
# BFS
#
def neighbor_stations(u, s2l, l2s)
  ret = []
  s2l[u].each do |l|
    l2s[l].each do |v|
      ret << [v, l]
    end
  end
  ret.uniq
end

def contains(history, u, distance)
  history.each do |v, _|
    return true if v == u
    return true if distance[v][u] == 0
  end
  false
end

def line_count(history, line)
  c = 0
  history.each do |_, l|
    c +=1 if l == line
  end
  c
end

memo = {}

ways = 0
used = []

q = PQueue.new
q.push [0, [[s_from, nil]]]
while not q.empty?

  d, history = q.pop
  next if history.size > opts[:l]
  if opts[:debug]
    puts "Pop #{d} #{history}"
  end

  # last node
  last_station, last_line = history[history.size - 1]
  if history.size > 1 && last_station == s_to

    route = history.map{|item| station_id[item[0]]}
    if used.index(route) != nil
      next
    else
      used << route
    end

    path_print history
    ways += 1
    next if history.size > 1
  end

  break if s2l[last_station] == nil

  neighbor_stations(last_station, s2l, l2s).each do |t, l|

    # pruning
    next if last_station == t || last_line == l
    next if t != s_to && (s2l[t] == nil || s2l[t].size == 1)
    next if t != s_to && contains(history, t, distance)
    next if t != s_to && line_count(history, l) >= 3

    d2 = d - distance[last_station][t] - opts[:w]

    if memo[t] == nil
      memo[t] = d2
    elsif memo[t] < d2 + opts[:margin]
      memo[t] = [memo[t], d2].max
    else
      next
    end

    if opts[:debug]
      puts "Push #{d2} #{[t, l]} #{history}"
    end
    q.push [d2, history + [[t, l]]]
  end
end

puts "Found #{ways} routes."
